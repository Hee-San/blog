<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>へーさんのブログ</title>
    <link>https://hee-san.github.io/blog/</link>
    <description>Recent content on へーさんのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Apr 2019 23:10:44 +0900</lastBuildDate>
    
        <atom:link href="https://hee-san.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>元号変換プログラム</title>
      <link>https://hee-san.github.io/blog/2019/%E5%85%83%E5%8F%B7%E5%A4%89%E6%8F%9B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/</link>
      <pubDate>Tue, 16 Apr 2019 23:10:44 +0900</pubDate>
      
      <guid>https://hee-san.github.io/blog/2019/%E5%85%83%E5%8F%B7%E5%A4%89%E6%8F%9B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/</guid>
      <description>年の西暦表記・元号表記を相互に変換するようなプログラムを作成します。
テスト書いていますか？ いきなり元号と関係のない話なんですが。
身の回りでテストコードをちゃんと書いている友人がいません。 悲しいです。書きましょう。
僕は、テストには以下のようなメリットがあると思います。
 動作が保証されること サンプルとして、使い方が簡単にわかること  同期の友人は研究室へ入るこの機に、ぜひテストやドキュメントを書く習慣をつけてほしいです。
この記事ではさらに踏み込んで、TDD（テスト駆動開発）を行います。
これは、メインプログラムより先にテストコードを書いちゃう開発手法です。
先に目標の動作を明記するので、開発する上で目標を見失うこともないです。
他にもメリットがたくさんあるんですが、それはまたの機会に書こうと思います。
開発環境 Pythonを使います。（今回の例では）簡潔なコードで済み、テストの用意が簡単だから選びました。
初めのうちは、外部ライブラリ等は利用しない予定です。
テストには、標準ライブラリのdoctestを使います。
2020年は令和2年 何はともあれ、まずはテストを書きます。
はじめに、「西暦を令和に変換できる」という仕様を満たしたいです。 「1年は元年とする」や「昭和・平成にも変換可能にする」等は後回しです。
 ad2jaという関数を作りました。 これを、西暦を整数で受け取り、元号表記をprintする関数にします。
関数の中身は、コメント文とpass文のみです。
pass文とは、「何もしない関数」なので、このad2ja関数も、何もしない関数です。
さて、今回は以下のようなコメント文を書きました。
&amp;quot;&amp;quot;&amp;quot; &amp;gt;&amp;gt;&amp;gt; ad2ja(2020) 令和2年 &amp;quot;&amp;quot;&amp;quot;  これが今回目標とする仕様の、最初のテストケースです。 数値2020を入力引数として受け取ると、令和2年と表示します。
doctestを用いると、上の例のように、doctest.testmod()を実行するだけですべてのテストを実行してくれます。 簡単にテストを実装できるのでオススメです。
出力実行結果を見ると、最後にテスト結果が出力されています。
TestResults(failed=1, attempted=1)  これは実行したテスト（attempted）が1つあり、そのうち1つのテストが失敗（failed）したという表示です。
その上には、失敗したテストの詳細が表示されています。
********************************************************************** File &amp;quot;__main__&amp;quot;, line 3, in __main__.ad2ja Failed example: ad2ja(2020) Expected: 令和2年 Got nothing **********************************************************************  令和2年という出力を期待していたのに、何も出力されなかった（Got nothing）と表示されています。
passしかない関数なので当然の結果でしょう。
このように、先にテストを書くのがTDDです。
それでは、このテストが通るようにプログラムを書いていきましょう。
 passを消し、print(&#39;令和2年&#39;)と追加することでテストが通りました。 faild=0になったので、詳細結果の表示は省かれています。</description>
    </item>
    
    <item>
      <title>Matlabのplotで複数の軸を並べる</title>
      <link>https://hee-san.github.io/blog/2019/matlab%E3%81%AEplot%E3%81%A7%E8%A4%87%E6%95%B0%E3%81%AE%E8%BB%B8%E3%82%92%E4%B8%A6%E3%81%B9%E3%82%8B/</link>
      <pubDate>Tue, 16 Apr 2019 10:06:23 +0900</pubDate>
      
      <guid>https://hee-san.github.io/blog/2019/matlab%E3%81%AEplot%E3%81%A7%E8%A4%87%E6%95%B0%E3%81%AE%E8%BB%B8%E3%82%92%E4%B8%A6%E3%81%B9%E3%82%8B/</guid>
      <description>某大学某学部某学科某コースでは、毎年多くのmatlabのplotに複数軸を配置できない難民が発生します。 この記事は、そのような難民を救済することを目的に書かれています。
ここで言う複数軸とは、以下のようなものを指します。 code とりあえずMatlabコードを張っておきます。 これを実行すれば、上記のグラフが作れると思います。
X = 0:.1:2*pi Y = sin(X) % figure(図) を作成 figure(&#39;Name&#39;,&#39;グラフ例&#39;); % axes(プロット領域) を作成 axes1 = axes(&#39;Position&#39;,[0.1, 0.25, 0.8, 0.65]); % Position [左下x座標, 左下y座標, 幅, 高さ] hold(axes1,&#39;on&#39;); % 「これから,この領域内で作業するよ」宣言 % stem(離散データ列のプロット) を作成 % stem()をplot(),scatter(),area()などに変更すると、グラフの種類が変わる stem(X,Y); % 軸の範囲 xlim(axes1,[0, 2*pi]); ylim(axes1,[-1.2, 1.2]); % grid(網目) をつける grid(axes1,&#39;on&#39;); % 残りの座標軸プロパティの設定 % 刻み幅は一定でなくても良い set(axes1, ... 領域1について、 &#39;FontSize&#39;, 10, ... 文字サイズ10 ... &#39;XTick&#39;, [0, pi/6, pi/4, pi/3, pi/2, 2*pi/3, 3*pi/4, 5*pi/6, pi, 3*pi/2, 2*pi], .</description>
    </item>
    
    <item>
      <title>AtCoderで水色になったのでブログを始めてみた</title>
      <link>https://hee-san.github.io/blog/2019/atcoder%E3%81%A7%E6%B0%B4%E8%89%B2%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E5%A7%8B%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sun, 14 Apr 2019 18:21:27 +0900</pubDate>
      
      <guid>https://hee-san.github.io/blog/2019/atcoder%E3%81%A7%E6%B0%B4%E8%89%B2%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E5%A7%8B%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>はじめまして。へーさんです。
昨日のABC124で水色に昇格しました！！ しばらく目標にしていたので、とても嬉しいです。
水色になるまでにやったことみたいな記事を、後日書こうと思っています。</description>
    </item>
    
  </channel>
</rss>
